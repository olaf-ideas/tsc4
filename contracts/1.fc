{-
  TASK 1 - Find branch of the cell tree
  Write the method that will find a branch of the tree by comparing its
  hash with the hash received in the first parameter. When the algorithm finds
  the subtree (branch) whose hash equals the received hash, the root cell of
  this branch should be returned. Return empty cell if the branch is not found.
-}

() recv_internal() {
}

builder begin_cell() asm "NEWC";
cell end_cell(builder b) asm "ENDC";
int is_null(tuple t) asm "ISNULL";
forall X -> X null() asm "PUSHNULL";
int cell_hash(cell c) asm "HASHCU";
int slice_refs(slice s) asm "SREFS";
(slice, cell) load_ref(slice s) asm( -> 1 0) "LDREF";
slice begin_parse(cell c) asm "CTOS";

(tuple, ()) push_back(tuple tail, cell head) asm "CONS";
(tuple, cell) pop_back(tuple list) asm "UNCONS";

(cell) find_branch_by_hash(int hash, cell tree) inline method_id {

    tuple queue = null();
    queue~push_back(tree);

    do {
        cell n1 = queue~pop_back();

        if (hash == n1.cell_hash()) {
            return n1;
        }

        slice a1 = n1.begin_parse();

        repeat (slice_refs(a1)) {
            cell n2 = a1~load_ref();

            if (hash == n2.cell_hash()) {
                return n2;
            }

            slice a2 = n2.begin_parse();

            repeat (slice_refs(a2)) {
                cell n3 = a2~load_ref();

                if (hash == n3.cell_hash()) {
                    return n3;
                }

                slice a3 = n3.begin_parse();

                repeat (slice_refs(a3)) {
                    cell n4 = a3~load_ref();

                    if (hash == n4.cell_hash()) {
                        return n4;
                    }

                    slice a4 = n4.begin_parse();

                    repeat (slice_refs(a4)) {
                        queue~push_back(a4~load_ref());
                    }
                }
            }
        }
    } until (is_null(queue));

    return begin_cell().end_cell();
}