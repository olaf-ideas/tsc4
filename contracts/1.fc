{-
  TASK 1 - Find branch of the cell tree
  Write the method that will find a branch of the tree by comparing its
  hash with the hash received in the first parameter. When the algorithm finds
  the subtree (branch) whose hash equals the received hash, the root cell of
  this branch should be returned. Return empty cell if the branch is not found.
-}

() recv_internal() {
}

builder begin_cell() asm "NEWC";
cell end_cell(builder b) asm "ENDC";
int is_null(tuple t) asm "ISNULL";
forall X -> tuple cons(X head, tuple tail) asm "CONS";
forall X -> X null() asm "PUSHNULL";
forall X -> (tuple, X) list_next(tuple list) asm( -> 1 0) "UNCONS";
int cell_hash(cell c) asm "HASHCU";
int slice_refs(slice s) asm "SREFS";
(slice, cell) load_ref(slice s) asm( -> 1 0) "LDREF";
slice begin_parse(cell c) asm "CTOS";

;; testable
;; (cell) find_branch_by_hash(int hash, cell tree) inline method_id asm """
;;     CONT:<{
;;         c2 SAVE
;;         SAMEALTSAVE	//  hash tree
;;         PUSHNULL	//  hash tree _3
;;         CONS	//  hash queue
;;         WHILE:<{
;;             DUP	//  hash queue queue
;;             ISNULL	//  hash queue _5
;;             NOT	//  hash queue _6
;;         }>DO<{	//  hash queue
;;             UNCONS	//  hash node queue
;;             OVER	//  hash node queue node
;;             HASHCU	//  hash node queue _10
;;             s3 s(-1) PUXC	//  hash node queue hash _10
;;             EQUAL	//  hash node queue _11
;;             IFJMP:<{	//  hash node queue
;;             DROP
;;             NIP	//  node
;;             RETALT
;;             }>	//  hash node queue
;;             SWAP	//  hash queue node
;;             CTOS	//  hash queue adj
;;             DUP	//  hash queue adj adj
;;             SREFS	//  hash queue adj _14
;;             REPEAT:<{	//  hash queue adj
;;             LDREF	//  hash queue _15 adj
;;             s0 s2 XCHG	//  hash adj _15 queue
;;             CONS	//  hash adj queue
;;             SWAP	//  hash queue adj
;;             }>
;;             DROP	//  hash queue
;;         }>	//  hash queue
;;         2DROP	// 
;;         NEWC	//  _18
;;         ENDC	//  _19
;;         }>
;; """;

forall X -> (tuple, X) xdd(tuple list) asm "UNCONS";
forall X -> tuple dxx(tuple tail, X head) asm "CONS";

(cell) find_branch_by_hash(int hash, cell tree) inline method_id {

    tuple queue = dxx(null(), tree);

    do {
        (queue, cell node) = xdd(queue);

        if (hash == cell_hash(node)) {
            return node;
        }

        slice adj = begin_parse(node);

        repeat (slice_refs(adj)) {
            queue = dxx(queue, adj~load_ref());
        }
    } until (is_null(queue));

    return begin_cell().end_cell();
}