"Asm.fif" include
// automatically generated from `contracts/2.fc` 
PROGRAM{
  DECLPROC recv_internal
  90041 DECLMETHOD matrix_multiplier
  recv_internal PROC:<{
    // 
  }>
  matrix_multiplier PROC:<{
    //  matrixA matrixB
    OVER	//  matrixA matrixB matrixA
    TLEN	//  matrixA matrixB n
    OVER	//  matrixA matrixB n matrixB
    TLEN	//  matrixA matrixB n m
    NIL	//  matrixA matrixB n m A
    s2 PUSH	//  matrixA matrixB n m A n
    DEC	//  matrixA matrixB n m A i
    s3 PUSH	//  matrixA matrixB n m A i n
    REPEAT:<{	//  matrixA matrixB n m A i
      NIL	//  matrixA matrixB n m A i row
      0 PUSHINT	//  matrixA matrixB n m A i row j=0
      s4 PUSH	//  matrixA matrixB n m A i row j=0 m
      REPEAT:<{	//  matrixA matrixB n m A i row j
        s7 s2 PUSH2	//  matrixA matrixB n m A i row j matrixA i
        INDEXVAR	//  matrixA matrixB n m A i row j _15
        OVER	//  matrixA matrixB n m A i row j _15 j
        INDEXVAR	//  matrixA matrixB n m A i row j _16
        ROT	//  matrixA matrixB n m A i j _16 row
        CONS	//  matrixA matrixB n m A i j row
        SWAP	//  matrixA matrixB n m A i row j
        INC	//  matrixA matrixB n m A i row j
      }>
      DROP	//  matrixA matrixB n m A i row
      ROT	//  matrixA matrixB n m i row A
      CONS	//  matrixA matrixB n m i A
      SWAP	//  matrixA matrixB n m A i
      DEC	//  matrixA matrixB n m A i
    }>
    DROP
    s4 POP	//  A matrixB n m
    s2 PUSH	//  A matrixB n m matrixB
    FIRST	//  A matrixB n m _24
    TLEN	//  A matrixB n m p
    NIL	//  A matrixB n m p B
    0 PUSHINT	//  A matrixB n m p B i=0
    s2 PUSH	//  A matrixB n m p B i=0 p
    REPEAT:<{	//  A matrixB n m p B i
      NIL	//  A matrixB n m p B i row
      0 PUSHINT	//  A matrixB n m p B i row j=0
      s5 PUSH	//  A matrixB n m p B i row j=0 m
      REPEAT:<{	//  A matrixB n m p B i row j
        s7 s0 PUSH2	//  A matrixB n m p B i row j matrixB j
        INDEXVAR	//  A matrixB n m p B i row j _34
        s3 PUSH	//  A matrixB n m p B i row j _34 i
        INDEXVAR	//  A matrixB n m p B i row j _35
        ROT	//  A matrixB n m p B i j _35 row
        CONS	//  A matrixB n m p B i j row
        SWAP	//  A matrixB n m p B i row j
        INC	//  A matrixB n m p B i row j
      }>
      DROP	//  A matrixB n m p B i row
      s1 s2 XCHG	//  A matrixB n m p i B row
      TPUSH	//  A matrixB n m p i B
      SWAP	//  A matrixB n m p B i
      INC	//  A matrixB n m p B i
    }>
    DROP
    s4 POP	//  A B n m p
    NIL	//  A B n m p C
    s0 s3 XCHG	//  A B C m p n
    REPEAT:<{	//  A B C m p
      0 PUSHINT	//  A B C m p j=0
      NIL	//  A B C m p j=0 C_row
      s2 PUSH	//  A B C m p j=0 C_row p
      REPEAT:<{	//  A B C m p j C_row
        s5 s1 PUSH2	//  A B C m p j C_row B j
        INDEXVAR	//  A B C m p j C_row B_row
        s7 PUSH	//  A B C m p j C_row B_row A
        CAR	//  A B C m p j C_row B_row A_row
        0 PUSHINT	//  A B C m p j C_row B_row A_row value=0
        s6 PUSH	//  A B C m p j C_row B_row A_row value=0 m
        REPEAT:<{	//  A B C m p j C_row B_row A_row value
          s0 s2 XCHG	//  A B C m p j C_row value A_row B_row
          UNCONS	//  A B C m p j C_row value A_row _55 B_row
          s0 s2 XCHG	//  A B C m p j C_row value B_row _55 A_row
          UNCONS	//  A B C m p j C_row value B_row _55 _57 A_row
          -ROT	//  A B C m p j C_row value B_row A_row _55 _57
          MUL	//  A B C m p j C_row value B_row A_row _59
          s1 s3 XCHG	//  A B C m p j C_row A_row B_row value _59
          ADD	//  A B C m p j C_row A_row B_row value
          s1 s2 XCHG	//  A B C m p j C_row B_row A_row value
        }>
        2 1 BLKDROP2	//  A B C m p j C_row value
        TPUSH	//  A B C m p j C_row
        SWAP	//  A B C m p C_row j
        INC	//  A B C m p C_row j
        SWAP	//  A B C m p j C_row
      }>
      NIP	//  A B C m p C_row
      s0 s5 XCHG	//  C_row B C m p A
      CDR	//  C_row B C m p A
      s3 s5 XCHG2	//  A B p m C C_row
      TPUSH	//  A B p m C
      s0 s2 XCHG	//  A B C m p
    }>
    s2 s4 XCHG
    4 BLKDROP	//  C
  }>
}END>c
