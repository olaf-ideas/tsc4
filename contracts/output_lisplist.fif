"Asm.fif" include
// automatically generated from `contracts/4.fc` 
PROGRAM{
  DECLPROC recv_internal
  76319 DECLMETHOD caesar_cipher_encrypt
  86492 DECLMETHOD caesar_cipher_decrypt
  recv_internal PROC:<{
    // 
  }>
  caesar_cipher_encrypt PROCINLINE:<{
    //  shift text
    SWAP
    26 PUSHINT	//  text shift _2=26
    MOD	//  text shift
    SWAP	//  shift text
    CTOS	//  shift _9
    32 PUSHINT	//  shift _9 _10=32
    SDSKIPFIRST	//  shift ds
    0 PUSHINT	//  shift ds _13=0
    NEWC	//  shift ds _13=0 _14
    32 STU	//  shift ds block
    NIL	//  shift ds block list
    0 PUSHINT	//  shift ds block list len=0
    WHILE:<{
      s3 PUSH	//  shift ds block list len ds
      SEMPTY	//  shift ds block list len _21
      NOT	//  shift ds block list len _22
    }>DO<{	//  shift ds block list len
      s3 PUSH	//  shift ds block list len ds
      SDEMPTY	//  shift ds block list len _23
      IF:<{	//  shift ds block list len
        s0 s3 XCHG	//  shift len block list ds
        PLDREF	//  shift len block list _24
        CTOS	//  shift len block list ds
        -ROT	//  shift len ds block list
        CONS	//  shift len ds list
        NEWC	//  shift len ds list block
        s0 s3 XCHG	//  shift block ds list len
        INC	//  shift block ds list len
        s2 s3 XCHG	//  shift ds block list len
      }>	//  shift ds block list len
      s0 s3 XCHG	//  shift len block list ds
      8 LDU	//  shift len block list x ds
      OVER	//  shift len block list x ds x
      96 GTINT	//  shift len block list x ds _35
      IF:<{	//  shift len block list x ds
        OVER	//  shift len block list x ds x
        123 LESSINT	//  shift len block list x ds _37
        IF:<{	//  shift len block list x ds
          s1 s5 XCPU	//  shift len block list ds x shift
          ADD	//  shift len block list ds x
          DUP	//  shift len block list ds x x
          122 GTINT	//  shift len block list ds x _40
          IF:<{	//  shift len block list ds x
            -26 ADDCONST	//  shift len block list ds x
          }>	//  shift len block list ds x
          SWAP	//  shift len block list x ds
        }>	//  shift len block list x ds
      }>ELSE<{	//  shift len block list x ds
        OVER	//  shift len block list x ds x
        64 GTINT	//  shift len block list x ds _44
        IF:<{	//  shift len block list x ds
          OVER	//  shift len block list x ds x
          91 LESSINT	//  shift len block list x ds _46
          IF:<{	//  shift len block list x ds
            s1 s5 XCPU	//  shift len block list ds x shift
            ADD	//  shift len block list ds x
            DUP	//  shift len block list ds x x
            90 GTINT	//  shift len block list ds x _49
            IF:<{	//  shift len block list ds x
              -26 ADDCONST	//  shift len block list ds x
            }>	//  shift len block list ds x
            SWAP	//  shift len block list x ds
          }>	//  shift len block list x ds
        }>	//  shift len block list x ds
      }>
      s0 s3 XCHG	//  shift len ds list x block
      8 STU	//  shift len ds list block
      s0 s1 s3 XCHG3	//  shift ds block list len
    }>	//  shift ds block list len
    s3 POP
    s3 POP	//  list len block
    ENDC	//  list len result
    SWAP	//  list result len
    REPEAT:<{	//  list result
      SWAP	//  result list
      UNCONS	//  result top list
      -ROT	//  list result top
      STREF	//  list _59
      ENDC	//  list result
    }>
    NIP	//  result
  }>
  caesar_cipher_decrypt PROCINLINE:<{
    //  shift text
    SWAP	//  text shift
    NEGATE	//  text _2
    SWAP	//  _2 text
    caesar_cipher_encrypt INLINECALLDICT	//  _3
  }>
}END>c
