"Asm.fif" include
// automatically generated from `./contracts/4.fc` 
PROGRAM{
  DECLPROC recv_internal
  76319 DECLMETHOD caesar_cipher_encrypt
  86492 DECLMETHOD caesar_cipher_decrypt
  recv_internal PROC:<{
    // 
  }>
  caesar_cipher_encrypt PROCINLINE:<{
    CONT:<{
      c2 SAVE
      SAMEALTSAVE	//  shift text
      SWAP
      26 PUSHINT	//  text shift _2=26
      MOD	//  text shift
      SWAP	//  shift text
      CTOS	//  shift _5
      32 PUSHINT	//  shift _5 _6=32
      SDSKIPFIRST	//  shift ds
      PUSHNULL	//  shift ds l
      0 PUSHINT	//  shift ds l _11=0
      NEWC	//  shift ds l _11=0 _12
      32 STU	//  shift ds l b
      s2 PUSH	//  shift ds l b ds
      SDEPTH	//  shift ds l b _15
      REPEAT:<{	//  shift ds l b
        s2 PUSH	//  shift ds l b ds
        SBITS	//  shift ds l b _16
        3 RSHIFT#	//  shift ds l b _18
        REPEAT:<{	//  shift ds l b
          s0 s2 XCHG	//  shift b l ds
          8 LDU	//  shift b l x ds
          OVER	//  shift b l x ds x
          127 GTINT	//  shift b l x ds _24
          IFJMP:<{	//  shift b l x ds
            s1 s4 XCHG
            4 BLKDROP	//  x
            AGAINEND
            1 LSHIFT#	//  x
          }>	//  shift b l x ds
          OVER	//  shift b l x ds x
          96 GTINT	//  shift b l x ds _29
          IF:<{	//  shift b l x ds
            OVER	//  shift b l x ds x
            123 LESSINT	//  shift b l x ds _31
            IF:<{	//  shift b l x ds
              s1 s4 XCPU	//  shift b l ds x shift
              ADD	//  shift b l ds x
              DUP	//  shift b l ds x x
              122 GTINT	//  shift b l ds x _34
              IF:<{	//  shift b l ds x
                -26 ADDCONST	//  shift b l ds x
              }>	//  shift b l ds x
              SWAP	//  shift b l x ds
            }>	//  shift b l x ds
          }>ELSE<{	//  shift b l x ds
            OVER	//  shift b l x ds x
            64 GTINT	//  shift b l x ds _38
            IF:<{	//  shift b l x ds
              OVER	//  shift b l x ds x
              91 LESSINT	//  shift b l x ds _40
              IF:<{	//  shift b l x ds
                s1 s4 XCPU	//  shift b l ds x shift
                ADD	//  shift b l ds x
                DUP	//  shift b l ds x x
                90 GTINT	//  shift b l ds x _43
                IF:<{	//  shift b l ds x
                  -26 ADDCONST	//  shift b l ds x
                }>	//  shift b l ds x
                SWAP	//  shift b l x ds
              }>	//  shift b l x ds
            }>	//  shift b l x ds
          }>
          s0 s3 XCHG	//  shift ds l x b
          8 STU	//  shift ds l b
        }>
        s0 s2 XCHG	//  shift b l ds
        LDREF	//  shift b l _97 _96
        DROP	//  shift b l _48
        CTOS	//  shift b l ds
        s0 s2 XCHG	//  shift ds l b
        CONS	//  shift ds l
        NEWC	//  shift ds l b
      }>
      s2 PUSH	//  shift ds l b ds
      SBITS	//  shift ds l b _54
      3 RSHIFT#	//  shift ds l b _56
      REPEAT:<{	//  shift ds l b
        s0 s2 XCHG	//  shift b l ds
        8 LDU	//  shift b l x ds
        OVER	//  shift b l x ds x
        127 GTINT	//  shift b l x ds _62
        IFJMP:<{	//  shift b l x ds
          s1 s4 XCHG
          4 BLKDROP	//  x
          AGAINEND
          1 LSHIFT#	//  x
        }>	//  shift b l x ds
        OVER	//  shift b l x ds x
        96 GTINT	//  shift b l x ds _67
        IF:<{	//  shift b l x ds
          OVER	//  shift b l x ds x
          123 LESSINT	//  shift b l x ds _69
          IF:<{	//  shift b l x ds
            s1 s4 XCPU	//  shift b l ds x shift
            ADD	//  shift b l ds x
            DUP	//  shift b l ds x x
            122 GTINT	//  shift b l ds x _72
            IF:<{	//  shift b l ds x
              -26 ADDCONST	//  shift b l ds x
            }>	//  shift b l ds x
            SWAP	//  shift b l x ds
          }>	//  shift b l x ds
        }>ELSE<{	//  shift b l x ds
          OVER	//  shift b l x ds x
          64 GTINT	//  shift b l x ds _76
          IF:<{	//  shift b l x ds
            OVER	//  shift b l x ds x
            91 LESSINT	//  shift b l x ds _78
            IF:<{	//  shift b l x ds
              s1 s4 XCPU	//  shift b l ds x shift
              ADD	//  shift b l ds x
              DUP	//  shift b l ds x x
              90 GTINT	//  shift b l ds x _81
              IF:<{	//  shift b l ds x
                -26 ADDCONST	//  shift b l ds x
              }>	//  shift b l ds x
              SWAP	//  shift b l x ds
            }>	//  shift b l x ds
          }>	//  shift b l x ds
        }>
        s0 s3 XCHG	//  shift ds l x b
        8 STU	//  shift ds l b
      }>
      2 2 BLKDROP2	//  l b
      ENDC	//  l result
      OVER	//  l result l
      ISNULL	//  l result _88
      IFNOT:<{	//  l result
        UNTIL:<{
          SWAP	//  result l
          UNCONS	//  result l _89
          s1 s2 XCHG	//  l result _89
          STREF	//  l _91
          ENDC	//  l result
          OVER	//  l result l
          ISNULL	//  l result _93
        }>	//  l result
        NIP	//  result
      }>ELSE<{
        NIP	//  result
      }>
    }>
    EXECUTE
  }>
  caesar_cipher_decrypt PROCINLINE:<{
    //  shift text
    SWAP
    26 PUSHINT	//  text shift _2=26
    MOD	//  text shift
    26 PUSHINT	//  text shift _4=26
    SWAP	//  text _4=26 shift
    SUB	//  text _5
    SWAP	//  _5 text
    caesar_cipher_encrypt INLINECALLDICT	//  _6
  }>
}END>c
