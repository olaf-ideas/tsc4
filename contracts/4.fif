// automatically generated from `./contracts/4.fc` 
PROGRAM{
  DECLPROC recv_internal
  DECLPROC encode_char
  76319 DECLMETHOD caesar_cipher_encrypt
  86492 DECLMETHOD caesar_cipher_decrypt
  recv_internal PROC:<{
    // 
  }>
  encode_char PROCINLINE:<{
    //  shift x
    DUP	//  shift x x
    91 LESSINT	//  shift x _3
    IF:<{	//  shift x
      DUP	//  shift x x
      64 GTINT	//  shift x _5
      IF:<{	//  shift x
        SWAP	//  x shift
        ADD	//  x
        DUP	//  x x
        90 GTINT	//  x _8
        IF:<{	//  x
          -26 ADDCONST	//  x
        }>	//  x
      }>ELSE<{
        NIP	//  x
      }>
    }>ELSE<{	//  shift x
      DUP	//  shift x x
      123 LESSINT	//  shift x _12
      IF:<{	//  shift x
        DUP	//  shift x x
        96 GTINT	//  shift x _14
        IF:<{	//  shift x
          SWAP	//  x shift
          ADD	//  x
          DUP	//  x x
          122 GTINT	//  x _17
          IF:<{	//  x
            -26 ADDCONST	//  x
          }>	//  x
        }>ELSE<{
          NIP	//  x
        }>
      }>ELSE<{
        NIP	//  x
      }>
    }>
  }>
  caesar_cipher_encrypt PROCINLINE:<{
    //  shift text
    SWAP
    26 PUSHINT	//  text shift _2=26
    MOD	//  text shift
    PUSHNULL	//  text shift l
    0 PUSHINT	//  text shift l _7=0
    NEWC	//  text shift l _7=0 _8
    32 STU	//  text shift l b
    s0 s3 XCHG	//  b shift l text
    CTOS	//  b shift l _12
    32 PUSHINT	//  b shift l _12 _13=32
    SDSKIPFIRST	//  b shift l ds
    DUP	//  b shift l ds ds
    SBITS	//  b shift l ds _15
    3 RSHIFT#	//  b shift l ds _17
    REPEAT:<{	//  b shift l ds
      8 LDU	//  b shift l _18 ds
      s3 s1 PUXC	//  b shift l ds shift _18
      encode_char INLINECALLDICT	//  b shift l ds _21
      s0 s4 XCHG2	//  ds shift l _21 b
      8 STU	//  ds shift l b
      s0 s3 XCHG	//  b shift l ds
    }>
    DUP	//  b shift l ds ds
    SREMPTY	//  b shift l ds _24
    IFNOT:<{	//  b shift l ds
      LDREF	//  b shift l _65 _64
      DROP	//  b shift l _25
      CTOS	//  b shift l ds
      s0 s3 XCHG	//  ds shift l b
      CONS	//  ds shift l
      NEWC	//  ds shift l b
      s3 PUSH	//  ds shift l b ds
      SDEPTH	//  ds shift l b _31
      REPEAT:<{	//  ds shift l b
        127 PUSHINT	//  ds shift l b _32=127
        REPEAT:<{	//  ds shift l b
          s0 s3 XCHG	//  b shift l ds
          8 LDU	//  b shift l _33 ds
          s3 s1 PUXC	//  b shift l ds shift _33
          encode_char INLINECALLDICT	//  b shift l ds _36
          s0 s4 XCHG2	//  ds shift l _36 b
          8 STU	//  ds shift l b
        }>
        s0 s3 XCHG	//  b shift l ds
        LDREF	//  b shift l _69 _68
        DROP	//  b shift l _39
        CTOS	//  b shift l ds
        s0 s3 XCHG	//  ds shift l b
        CONS	//  ds shift l
        NEWC	//  ds shift l b
      }>
      s3 PUSH	//  ds shift l b ds
      SBITS	//  ds shift l b _45
      3 RSHIFT#	//  ds shift l b _47
      REPEAT:<{	//  ds shift l b
        s0 s3 XCHG	//  b shift l ds
        8 LDU	//  b shift l _48 ds
        s3 s1 PUXC	//  b shift l ds shift _48
        encode_char INLINECALLDICT	//  b shift l ds _51
        s0 s4 XCHG2	//  ds shift l _51 b
        8 STU	//  ds shift l b
      }>
      s3 POP
      NIP	//  b l
    }>ELSE<{
      DROP
      NIP	//  b l
    }>
    SWAP	//  l b
    ENDC	//  l result
    OVER	//  l result l
    ISNULL	//  l result _56
    IFNOT:<{	//  l result
      UNTIL:<{
        SWAP	//  result l
        UNCONS	//  result l _57
        s1 s2 XCHG	//  l result _57
        STREF	//  l _59
        ENDC	//  l result
        OVER	//  l result l
        ISNULL	//  l result _61
      }>	//  l result
      NIP	//  result
    }>ELSE<{
      NIP	//  result
    }>
  }>
  caesar_cipher_decrypt PROCINLINE:<{
    //  shift text
    SWAP
    26 PUSHINT	//  text shift _2=26
    MOD	//  text shift
    26 PUSHINT	//  text shift _4=26
    SWAP	//  text _4=26 shift
    SUB	//  text _5
    SWAP	//  _5 text
    caesar_cipher_encrypt INLINECALLDICT	//  _6
  }>
}END>c
