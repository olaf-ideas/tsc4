"Asm.fif" include
// automatically generated from `./contracts/5.fc` 
PROGRAM{
  DECLPROC recv_internal
  DECLPROC fibonacci
  100995 DECLMETHOD fibonacci_sequence
  recv_internal PROC:<{
    // 
  }>
  fibonacci PROCINLINE:<{
    //  n
    DUP	//  n n
    SGN	//  n _1
    IF:<{	//  n
      PUSHNULL	//  n x
      OVER	//  n x n
      UBITSIZE	//  n x y
      DUP	//  n x y y
      REPEAT:<{	//  n x y
        s2 PUSH	//  n x y n
        1 MODPOW2#	//  n x y _8
        s1 s2 XCHG	//  n y x _8
        CONS	//  n y x
        s0 s2 XCHG	//  x y n
        1 RSHIFT#	//  x y n
        -ROT	//  n x y
      }>
      s2 POP	//  y x
      1 PUSHINT	//  y x a=1
      0 PUSHINT	//  y x a=1 b=0
      s0 s3 XCHG	//  b=0 x a=1 y
      REPEAT:<{	//  b x a
        SWAP	//  b a x
        UNCONS	//  b a x _16
        IF:<{	//  b a x
          s1 s2 PUSH2	//  b a x a b
          ADD	//  b a x ab
          DUP	//  b a x ab ab
          MUL	//  b a x ab2
          s2 s0 XCPU	//  b ab2 x a a
          MUL	//  b ab2 x _23
          s2 s(-1) PUXC	//  b ab2 x ab2 _23
          SUB	//  b ab2 x c
          s3 s0 XCPU	//  c ab2 x b b
          MUL	//  c ab2 x _26
          s1 s2 XCHG	//  c x ab2 _26
          ADD	//  a x b
        }>ELSE<{	//  b a x
          s1 s1 PUSH2	//  b a x a a
          MUL	//  b a x _29
          s3 s3 PUSH2	//  b a x _29 b b
          MUL	//  b a x _29 _30
          ADD	//  b a x c
          s0 s2 XCHG	//  b c x a
          1 LSHIFT#	//  b c x _34
          s3 PUSH	//  b c x _34 b
          ADD	//  b c x _35
          s1 s3 XCHG	//  x c b _35
          MUL	//  x a b
          s1 s2 XCHG	//  a x b
        }>
        s0 s2 XCHG	//  b x a
      }>
      NIP	//  b a
      SWAP	//  a b
    }>ELSE<{	//  n
      DROP	// 
      1 PUSHINT	//  _37=1
      0 PUSHINT	//  _37=1 _38=0
    }>
  }>
  fibonacci_sequence PROCINLINE:<{
    //  n k
    // n, k
    DUP
    // n, k, k
    SGN
    // n, k, k=0
    IF:<{
      SWAP // k, n
      // k, n
      fibonacci INLINECALLDICT
      // s0 DUMP
      // s1 DUMP
      // s2 DUMP
      ROT // k, a, b
      // k, f_n-1, f_n
      // f_n-1, f_n, k
      s0 PUSH
      // f_n-1, f_n, k, k
      1 SUBCONST
      // f_n-1, f_n, k, k-1
      REPEAT:<{
        // f_n-1, f_n, k
        s2 s1 PUSH2
        ADD
        SWAP
      }>
      // f_n-1 f_n, f_n + 1, ... f_n + k - 3, f_n + k - 2, f_n + k - 1, k
      TUPLEVAR
      // f_n-1 (f_n, f_n + 1, ..., f_n + k - 1)
      SWAP
      // (f_n, f_n + 1, ..., f_n + k - 1) f_n-1
      DROP
      // (f_n, f_n + 1, ..., f_n + k - 1)
    }>ELSE<{
      // n, k
      DROP2
      //
      NIL
    }>	//  _2
  }>
}END>c
