{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

(tuple) _fibonacci_sequence (int n, int k) asm """
// n, k
DUP
// n, k, k
SGN
// n, k, k=0
IF:<{
  SWAP // k, n

s0 PUSH
15 LEQINT
IF:<{
0 SUBINT
1 PUSHINT
0 PUSHINT
}>ELSE<{
s0 PUSH
31 LEQINT
IF:<{
16 SUBINT
610 PUSHINT
987 PUSHINT
}>ELSE<{
s0 PUSH
47 LEQINT
IF:<{
32 SUBINT
1346269 PUSHINT
2178309 PUSHINT
}>ELSE<{
s0 PUSH
63 LEQINT
IF:<{
48 SUBINT
2971215073 PUSHINT
4807526976 PUSHINT
}>ELSE<{
s0 PUSH
79 LEQINT
IF:<{
64 SUBINT
6557470319842 PUSHINT
10610209857723 PUSHINT
}>ELSE<{
s0 PUSH
95 LEQINT
IF:<{
80 SUBINT
14472334024676221 PUSHINT
23416728348467685 PUSHINT
}>ELSE<{
s0 PUSH
111 LEQINT
IF:<{
96 SUBINT
31940434634990099905 PUSHINT
51680708854858323072 PUSHINT
}>ELSE<{
s0 PUSH
127 LEQINT
IF:<{
112 SUBINT
70492524767089125814114 PUSHINT
114059301025943970552219 PUSHINT
}>ELSE<{
s0 PUSH
143 PUSHINT
LEQ
IF:<{
128 PUSHINT
SUB
155576970220531065681649693 PUSHINT
251728825683549488150424261 PUSHINT
}>ELSE<{
s0 PUSH
159 PUSHINT
LEQ
IF:<{
144 PUSHINT
SUB
343358302784187294870275058337 PUSHINT
555565404224292694404015791808 PUSHINT
}>ELSE<{
s0 PUSH
175 PUSHINT
LEQ
IF:<{
160 PUSHINT
SUB
757791618667731139247631372100066 PUSHINT
1226132595394188293000174702095995 PUSHINT
}>ELSE<{
s0 PUSH
191 PUSHINT
LEQ
IF:<{
176 PUSHINT
SUB
1672445759041379840132227567949787325 PUSHINT
2706074082469569338358691163510069157 PUSHINT
}>ELSE<{
s0 PUSH
207 PUSHINT
LEQ
IF:<{
192 PUSHINT
SUB
3691087032412706639440686994833808526209 PUSHINT
5972304273877744135569338397692020533504 PUSHINT
}>ELSE<{
s0 PUSH
223 PUSHINT
LEQ
IF:<{
208 PUSHINT
SUB
8146227408089084511865756065370647467555938 PUSHINT
13180872826374098837632191485015125807374171 PUSHINT
}>ELSE<{
s0 PUSH
239 PUSHINT
LEQ
IF:<{
224 PUSHINT
SUB
17978720198565577104981084195586024127087428957 PUSHINT
29090180355503362256910111038089984964854261893 PUSHINT
}>ELSE<{
s0 PUSH
255 PUSHINT
LEQ
IF:<{
240 PUSHINT
SUB
39679027332006820581608740953902289877834488152161 PUSHINT
64202014863723094126901777428873111802307548623680 PUSHINT
}>ELSE<{
s0 PUSH
271 PUSHINT
LEQ
IF:<{
256 PUSHINT
SUB
87571595343018854458033386304178158174356588264390370 PUSHINT
141693817714056513234709965875411919657707794958199867 PUSHINT
}>ELSE<{
s0 PUSH
287 PUSHINT
LEQ
IF:<{
272 PUSHINT
SUB
193270471243015279782059101964580241188515112465021394429 PUSHINT
312718191492907860985910767785256677811449301165198482789 PUSHINT
}>ELSE<{
s0 PUSH
303 PUSHINT
LEQ
IF:<{
288 PUSHINT
SUB
426547842461739379460149980002442288124894678853713953114433 PUSHINT
690168906931029935139391829792095612517948949963798093315456 PUSHINT
}>ELSE<{
s0 PUSH
319 PUSHINT
LEQ
IF:<{
304 PUSHINT
SUB
941390895042587567453271223806288165311401367715034229502159202 PUSHINT
1523202464878591573944776782440387231570435521120801226748728603 PUSHINT
}>ELSE<{
s0 PUSH
335 PUSHINT
LEQ
IF:<{
320 PUSHINT
SUB
2077649278811148299629990130790497978399974693652401690797312244381 PUSHINT
3361707149818144672666187219454104827980338677164658343636350711365 PUSHINT
}>ELSE<{
s0 PUSH
351 PUSHINT
LEQ
IF:<{
336 PUSHINT
SUB
4585371016945309254695820765383405232040578837489482816555438621189665 PUSHINT
7419286156446180413982701248558426914965375890066879843604199271253952 PUSHINT
}>ELSE<{
s0 PUSH
367 PUSHINT
LEQ
IF:<{
352 PUSHINT
SUB
10119911756749018713965376799211044556615579094364594923736162239653346274 PUSHINT
16374361185569570355515148989381228747223756609038926650176124155306760699 PUSHINT
}>ELSE<{
s0 PUSH
383 PUSHINT
LEQ
IF:<{
368 PUSHINT
SUB
22334640661774067356412331900038009953045351020683823507202893507476314037053 PUSHINT
36138207717265885328441519836863123286695915870773021050058862406562749608741 PUSHINT
}>ELSE<{
}>
}>
}>
}>
}>
}>
}>
}>
}>
}>
}>
}>
}>
}>
}>
}>
}>
}>
}>
}>
}>
}>
}>
}>


  ROT // k, a, b, n
  REPEAT:<{ // k, a, b
    TUCK // k, b, a, b
    ADD // k, b, a + b
  }>
  // k, f_n-1, f_n
  ROT
  // f_n-1, f_n, k
  s0 PUSH
  // f_n-1, f_n, k, k
  1 SUBCONST
  // f_n-1, f_n, k, k-1
  REPEAT:<{
    // f_n-1, f_n, k
    s2 s1 PUSH2
    ADD
    SWAP
  }>
  // f_n-1 f_n, f_n + 1, ... f_n + k - 3, f_n + k - 2, f_n + k - 1, k
  TUPLEVAR
  // f_n-1 (f_n, f_n + 1, ..., f_n + k - 1)
  SWAP
  // (f_n, f_n + 1, ..., f_n + k - 1) f_n-1
  DROP
  // (f_n, f_n + 1, ..., f_n + k - 1)
}>ELSE<{
  // n, k
  DROP2
  //
  NIL
}>
""";

;; testable
(tuple) fibonacci_sequence (int n, int k) inline method_id {
  return _fibonacci_sequence(n, k);
}