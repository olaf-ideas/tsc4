{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}


(int, int) fib(int a, int b) inline asm(b a) "OVER ADD";
;; (int, int) fib(int a, int b) asm "DUP2 ADD";

;; (tuple) stack_tuple(int n) asm "TUPLEVAR";

;; testable
(tuple) fibonacci_sequence (int n, int k) inline method_id {
  tuple result = empty_tuple();

  if (k == 0) {
    return result;
  }

  int a = 1;
  int b = 0;
  
  if (n >= 100) {
    if (n < 200) {
      a = 218922995834555169026;
      b = 354224848179261915075;
      n -= 100;
    }
    else {
      if (n < 300) {
        a = 173402521172797813159685037284371942044301;
        b = 280571172992510140037611932413038677189525;
        n -= 200;
      }
      else {
        a = 137347080577163115432025771710279131845700275212767467264610201;
        b = 222232244629420445529739893461909967206666939096499764990979600;
        n -= 300;
      }
    }
  }

  repeat (n) {
    (a, b) = fib(a, b);
  }

  result~tpush(b);

  repeat(k - 1) {
    int c = a + b;

    a = b;
    b = c;

    result~tpush(b);
  }

  return result;
}

