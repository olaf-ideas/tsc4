{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

(tuple) _fibonacci_sequence (int n, int k) asm """
// n, k
DUP
// n, k, k
SGN
// n, k, k=0
IF:<{
  SWAP // k, n

  s0 PUSH
  40 LEQINT
  IF:<{
  0 SUBINT
  1 PUSHINT
  0 PUSHINT
  }>ELSE<{
  s0 PUSH
  81 LEQINT
  IF:<{
  41 SUBINT
  102334155 PUSHINT
  165580141 PUSHINT
  }>ELSE<{
  s0 PUSH
  122 LEQINT
  IF:<{
  82 SUBINT
  37889062373143906 PUSHINT
  61305790721611591 PUSHINT
  }>ELSE<{
  s0 PUSH
  163 PUSHINT
  LEQ
  IF:<{
  123 SUBINT
  14028366653498915298923761 PUSHINT
  22698374052006863956975682 PUSHINT
  }>ELSE<{
  s0 PUSH
  204 PUSHINT
  LEQ
  IF:<{
  164 PUSHINT
  SUB
  5193981023518027157495786850488117 PUSHINT
  8404037832974134882743767626780173 PUSHINT
  }>ELSE<{
  s0 PUSH
  245 PUSHINT
  LEQ
  IF:<{
  205 PUSHINT
  SUB
  1923063428480944139667114773918309212080528 PUSHINT
  3111581989804070186099320645726169127737705 PUSHINT
  }>ELSE<{
  s0 PUSH
  286 PUSHINT
  LEQ
  IF:<{
  246 PUSHINT
  SUB
  712011255569818855923257924200496343807632829750245 PUSHINT
  1152058411884454788302593034206568772452674037325128 PUSHINT
  }>ELSE<{
  s0 PUSH
  327 PUSHINT
  LEQ
  IF:<{
  287 PUSHINT
  SUB
  263621064469290555679241849789653324393054271110084140201023 PUSHINT
  426547842461739379460149980002442288124894678853713953114433 PUSHINT
  }>ELSE<{
  s0 PUSH
  368 PUSHINT
  LEQ
  IF:<{
  328 PUSHINT
  SUB
  97605290770725966021179803308812675106786783237939047196728424115618 PUSHINT
  157928677948851033162880158208040021697730983590298819190379481318411 PUSHINT
  }>ELSE<{
  s0 PUSH
  409 PUSHINT
  LEQ
  IF:<{
  369 PUSHINT
  SUB
  36138207717265885328441519836863123286695915870773021050058862406562749608741 PUSHINT
  58472848379039952684853851736901133239741266891456844557261755914039063645794 PUSHINT
  }>ELSE<{
  }>
  }>
  }>
  }>
  }>
  }>
  }>
  }>
  }>
  }>


  ROT // k, a, b, n
  REPEAT:<{ // k, a, b
    TUCK // k, b, a, b
    ADD // k, b, a + b
  }>
  // k, f_n-1, f_n
  ROT
  // f_n-1, f_n, k
  s0 PUSH
  // f_n-1, f_n, k, k
  1 SUBCONST
  // f_n-1, f_n, k, k-1
  REPEAT:<{
    // f_n-1, f_n, k
    s2 s1 PUSH2
    ADD
    SWAP
  }>
  // f_n-1 f_n, f_n + 1, ... f_n + k - 3, f_n + k - 2, f_n + k - 1, k
  TUPLEVAR
  // f_n-1 (f_n, f_n + 1, ..., f_n + k - 1)
  SWAP
  // (f_n, f_n + 1, ..., f_n + k - 1) f_n-1
  DROP
  // (f_n, f_n + 1, ..., f_n + k - 1)
}>ELSE<{
  // n, k
  DROP2
  //
  NIL
}>
""";

;; testable
(tuple) fibonacci_sequence (int n, int k) inline method_id {
  return _fibonacci_sequence(n, k);
}