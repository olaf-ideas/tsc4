{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

(int, int) _fibonacci(int n) asm  """
    DUP	//  n n
    SGN
    IF:<{	//  n
      DUP	//  n n
      1 RSHIFT#	//  n _8
      fibonacci INLINECALLDICT	//  n a b
      s1 s1 PUSH2	//  n a b a a
      MUL	//  n a b _11
      s1 s1 PUSH2	//  n a b _11 b b
      MUL	//  n a b _11 _12
      ADD	//  n a b c
      s0 s2 XCHG	//  n c b a
      1 LSHIFT#	//  n c b _16
      OVER	//  n c b _16 b
      ADD	//  n c b _17
      MUL	//  n c d
      s0 s2 XCHG	//  d c n
      1 MODPOW2#	//  d c _20
      IFJMP:<{	//  d c
        OVER	//  d c d
        ADD	//  d _21
      }>	//  d c
      SWAP	//  c d
    }>ELSE<{
      DROP	// 
      1 PUSHINT	//  _3=1
      0 PUSHINT	//  _3=1 _4=0
    }>
""";

(int, int) fibonacci(int n) inline {
  return _fibonacci(n);
}

(tuple) _fibonacci_sequence (int n, int k) asm """
// n, k
DUP
// n, k, k
SGN
// n, k, k=0
IF:<{
  SWAP // k, n
  // k, n
  fibonacci INLINECALLDICT
  // s0 DUMP
  // s1 DUMP
  // s2 DUMP

  ROT // k, a, b
  // k, f_n-1, f_n
  // f_n-1, f_n, k
  s0 PUSH
  // f_n-1, f_n, k, k
  1 SUBCONST
  // f_n-1, f_n, k, k-1
  REPEAT:<{
    // f_n-1, f_n, k
    s2 s1 PUSH2
    ADD
    SWAP
  }>
  // f_n-1 f_n, f_n + 1, ... f_n + k - 3, f_n + k - 2, f_n + k - 1, k
  TUPLEVAR
  // f_n-1 (f_n, f_n + 1, ..., f_n + k - 1)
  SWAP
  // (f_n, f_n + 1, ..., f_n + k - 1) f_n-1
  DROP
  // (f_n, f_n + 1, ..., f_n + k - 1)
}>ELSE<{
  // n, k
  DROP2
  //
  NIL
}>
""";

;; testable
(tuple) fibonacci_sequence (int n, int k) inline method_id {
  return _fibonacci_sequence(n, k);
}