{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

(tuple) _fibonacci_sequence (int n, int k) asm """
// n, k
DUP
// n, k, k
SGN
// n, k, k=0
IF:<{
  SWAP // k, n

s0 PUSH
30 LEQINT
IF:<{
0 SUBINT
1 PUSHINT
0 PUSHINT
}>ELSE<{
s0 PUSH
61 LEQINT
IF:<{
31 SUBINT
832040 PUSHINT
1346269 PUSHINT
}>ELSE<{
s0 PUSH
92 LEQINT
IF:<{
62 SUBINT
2504730781961 PUSHINT
4052739537881 PUSHINT
}>ELSE<{
s0 PUSH
123 LEQINT
IF:<{
93 SUBINT
7540113804746346429 PUSHINT
12200160415121876738 PUSHINT
}>ELSE<{
s0 PUSH
154 PUSHINT
LEQ
IF:<{
124 SUBINT
22698374052006863956975682 PUSHINT
36726740705505779255899443 PUSHINT
}>ELSE<{
s0 PUSH
185 PUSHINT
LEQ
IF:<{
155 PUSHINT
SUB
68330027629092351019822533679447 PUSHINT
110560307156090817237632754212345 PUSHINT
}>ELSE<{
s0 PUSH
216 PUSHINT
LEQ
IF:<{
186 PUSHINT
SUB
205697230343233228174223751303346572685 PUSHINT
332825110087067562321196029789634457848 PUSHINT
}>ELSE<{
s0 PUSH
247 PUSHINT
LEQ
IF:<{
217 PUSHINT
SUB
619220451666590135228675387863297874269396512 PUSHINT
1001919737325604309473206237898433933302481297 PUSHINT
}>ELSE<{
s0 PUSH
278 PUSHINT
LEQ
IF:<{
248 PUSHINT
SUB
1864069667454273644225850958407065116260306867075373 PUSHINT
3016128079338728432528443992613633888712980904400501 PUSHINT
}>ELSE<{
s0 PUSH
309 PUSHINT
LEQ
IF:<{
279 PUSHINT
SUB
5611500259351924431073312796924978741056961814867751431689 PUSHINT
9079598147510263717870894449029933369491131786514446266146 PUSHINT
}>ELSE<{
s0 PUSH
340 PUSHINT
LEQ
IF:<{
310 PUSHINT
SUB
16892574194241670428824570378554538679120491007541580961500624834 PUSHINT
27332759203762391000908267962175339332906872716290689783750745455 PUSHINT
}>ELSE<{
s0 PUSH
371 PUSHINT
LEQ
IF:<{
341 PUSHINT
SUB
50852543833066829834000968538942350270948615962802847667687312219838755 PUSHINT
82281144336295989585340713815384441479925901307982452831610787275979941 PUSHINT
}>ELSE<{
}>
}>
}>
}>
}>
}>
}>
}>
}>
}>
}>
}>



  ROT // k, a, b, n
  REPEAT:<{ // k, a, b
    TUCK // k, b, a, b
    ADD // k, b, a + b
  }>
  // k, f_n-1, f_n
  ROT
  // f_n-1, f_n, k
  s0 PUSH
  // f_n-1, f_n, k, k
  1 SUBCONST
  // f_n-1, f_n, k, k-1
  REPEAT:<{
    // f_n-1, f_n, k
    s2 s1 PUSH2
    ADD
    SWAP
  }>
  // f_n-1 f_n, f_n + 1, ... f_n + k - 3, f_n + k - 2, f_n + k - 1, k
  TUPLEVAR
  // f_n-1 (f_n, f_n + 1, ..., f_n + k - 1)
  SWAP
  // (f_n, f_n + 1, ..., f_n + k - 1) f_n-1
  DROP
  // (f_n, f_n + 1, ..., f_n + k - 1)
}>ELSE<{
  // n, k
  DROP2
  //
  NIL
}>
""";

;; testable
(tuple) fibonacci_sequence (int n, int k) inline method_id {
  return _fibonacci_sequence(n, k);
}