{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

(tuple) _fibonacci_sequence (int n, int k) asm """
// n, k
s0 PUSH
// n, k, k
0 EQINT
// n, k, k=0
IF:<{
  // n, k
  DROP2
  //
  NIL
}>ELSE<{
  // n, k
  s0 PUSH
  // n, k, k
  1 EQINT
  // n, k, k=1
  IF:<{
    // n, k
    DROP
    // n

    s0 PUSH
    100 GEQINT
    IF:<{
      100 SUBINT

      218922995834555169026 PUSHINT
      354224848179261915075 PUSHINT
    }>ELSE<{
      1 PUSHINT
      0 PUSHINT
    }>

    // n, f_-1, f_0
    ROT
    // f_-1, f_0, n
    REPEAT:<{
      // f_i-1, f_i
      TUCK 
      // f_i, f_i-1, f_i
      ADD
      // f_i, f_i+1
    }>
    SWAP
    // f_n, f_n-1
    DROP
    // f_n
    SINGLE
    // (f_n)
  }>ELSE<{
    SWAP // k, n

    s0 PUSH
    100 GEQINT
    IF:<{
      100 SUBINT

      354224848179261915075 PUSHINT
      573147844013817084101 PUSHINT
    }>ELSE<{
      0 PUSHINT
      1 PUSHINT
    }>

    
    ROT // k, a, b, n
    REPEAT:<{ // k, a, b
      TUCK // k, b, a, b
      ADD // k, b, a + b
    }>
    // k, f_n, f_n + 1
    s2 PUSH
    // k, f_n, f_n + 1, k
    2 SUBCONST
    // k, f_n, f_n + 1, k - 2 remember to if 1
    REPEAT:<{
      // k, f_n, f_n + 1
      DUP2
      ADD
      s3 s2 XCHG
    }>
    // f_n, f_n + 1, ... f_n + k - 3, k, f_n + k - 2, f_n + k - 1
    ROT
    // f_n, f_n + 1, ... f_n + k - 3, f_n + k - 2, f_n + k - 1, k
    TUPLEVAR
    // (f_n, f_n + 1, ..., f_n + k - 1)
  }>
}>
""";

(tuple, ()) ~tpush(tuple t, int value) asm "TPUSH";
int last(tuple t) asm "LAST";
int tlen(tuple t) asm "TLEN";

;; testable
(tuple) fibonacci_sequence (int n, int k) inline method_id {
  if (k == 255) {
    tuple t = _fibonacci_sequence(n, k - 1);
    int a = t.at(252);
    int b = t.last();
    t~tpush(a + b);
    return t;
  }
  else {
    return _fibonacci_sequence(n, k);
  }
}