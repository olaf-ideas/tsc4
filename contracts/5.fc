{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

(tuple) _fibonacci_sequence (int n, int k) asm """
// n, k
s0 PUSH
// n, k, k
0 EQINT
// n, k, k=0
IF:<{
  // n, k
  DROP2
  //
  NIL
}>ELSE<{
  SWAP // k, n

  s0 PUSH
  185 PUSHINT
  LEQ
  IF:<{
  s0 PUSH
  92 LEQINT
  IF:<{
  s0 PUSH
  46 LEQINT
  IF:<{
  s0 PUSH
  23 LEQINT
  IF:<{
  0 SUBINT
  1 PUSHINT
  0 PUSHINT
  }>ELSE<{
  24 SUBINT
  28657 PUSHINT
  46368 PUSHINT
  }>
  }>ELSE<{
  s0 PUSH
  69 LEQINT
  IF:<{
  47 SUBINT
  1836311903 PUSHINT
  2971215073 PUSHINT
  }>ELSE<{
  70 SUBINT
  117669030460994 PUSHINT
  190392490709135 PUSHINT
  }>
  }>
  }>ELSE<{
  s0 PUSH
  139 PUSHINT
  LEQ
  IF:<{
  s0 PUSH
  116 LEQINT
  IF:<{
  93 SUBINT
  7540113804746346429 PUSHINT
  12200160415121876738 PUSHINT
  }>ELSE<{
  117 SUBINT
  781774079430987230203437 PUSHINT
  1264937032042997393488322 PUSHINT
  }>
  }>ELSE<{
  s0 PUSH
  162 PUSHINT
  LEQ
  IF:<{
  140 PUSHINT
  SUB
  50095301248058391139327916261 PUSHINT
  81055900096023504197206408605 PUSHINT
  }>ELSE<{
  163 PUSHINT
  SUB
  3210056809456107725247980776292056 PUSHINT
  5193981023518027157495786850488117 PUSHINT
  }>
  }>
  }>
  }>ELSE<{
  s0 PUSH
  278 PUSHINT
  LEQ
  IF:<{
  s0 PUSH
  232 PUSHINT
  LEQ
  IF:<{
  s0 PUSH
  209 PUSHINT
  LEQ
  IF:<{
  186 PUSHINT
  SUB
  205697230343233228174223751303346572685 PUSHINT
  332825110087067562321196029789634457848 PUSHINT
  }>ELSE<{
  210 PUSHINT
  SUB
  21327100234463183349497947550385773274930109 PUSHINT
  34507973060837282187130139035400899082304280 PUSHINT
  }>
  }>ELSE<{
  s0 PUSH
  255 PUSHINT
  LEQ
  IF:<{
  233 PUSHINT
  SUB
  1366619256256991435939546543402365995473880912459 PUSHINT
  2211236406303914545699412969744873993387956988653 PUSHINT
  }>ELSE<{
  256 PUSHINT
  SUB
  87571595343018854458033386304178158174356588264390370 PUSHINT
  141693817714056513234709965875411919657707794958199867 PUSHINT
  }>
  }>
  }>ELSE<{
  s0 PUSH
  324 PUSHINT
  LEQ
  IF:<{
  s0 PUSH
  301 PUSHINT
  LEQ
  IF:<{
  279 PUSHINT
  SUB
  5611500259351924431073312796924978741056961814867751431689 PUSHINT
  9079598147510263717870894449029933369491131786514446266146 PUSHINT
  }>ELSE<{
  302 PUSHINT
  SUB
  359579325206583560961765665172189099052367214309267232255589801 PUSHINT
  581811569836004006491505558634099066259034153405766997246569401 PUSHINT
  }>
  }>ELSE<{
  s0 PUSH
  347 PUSHINT
  LEQ
  IF:<{
  325 PUSHINT
  SUB
  23041483585524168262220906489642018075101617466780496790573690289968 PUSHINT
  37281903592600898879479448409585328515842582885579275203077366912825 PUSHINT
  }>ELSE<{
  348 PUSHINT
  SUB
  1476475227036382503281437027911536541406625644706194668152438732346449273 PUSHINT
  2388987100892084569134167581129323824600775934984068529143761591653482576 PUSHINT
  }>
  }>
  }>
  }>


  ROT // k, a, b, n
  REPEAT:<{ // k, a, b
    TUCK // k, b, a, b
    QADD // k, b, a + b
  }>
  // k, f_n-1, f_n
  s2 PUSH
  // k, f_n-1, f_n, k
  1 SUBCONST
  // k, f_n-1, f_n, k - 1
  REPEAT:<{
    // k, f_n-1, f_n
    DUP2
    QADD
    s3 s2 XCHG
  }>
  // f_n-1 f_n, f_n + 1, ... f_n + k - 3, k, f_n + k - 2, f_n + k - 1
  ROT
  // f_n-1 f_n, f_n + 1, ... f_n + k - 3, f_n + k - 2, f_n + k - 1, k
  TUPLEVAR
  // f_n-1 (f_n, f_n + 1, ..., f_n + k - 1)
  SWAP
  // (f_n, f_n + 1, ..., f_n + k - 1) f_n-1
  DROP
  // (f_n, f_n + 1, ..., f_n + k - 1)
}>
""";

;; testable
(tuple) fibonacci_sequence (int n, int k) inline method_id {
  return _fibonacci_sequence(n, k);
}