{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

forall X -> tuple tpush(tuple t, X value) asm "TPUSH";
tuple empty_tuple() asm "NIL";
forall X -> X null() asm "PUSHNULL";

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
  if (k == 0) {
    return null();
  }

  int a = 1;
  int p = 1;
  int b = 0;
  int q = 0;

  while (n > 0) {
    if (n & 1) {
      int aq = a * q;
      a = b * q + aq + a * p;
      b = b * q + aq;
    }

    int qq = q * q;
    
    q = 2 * p * q + qq;
    p = p * p + qq;

    n >>= 1;
  }

  tuple result = empty_tuple();

  tpush(result, a);

  repeat(k - 1) {
    int c = a + b;
    a = b;
    b = c;

    tpush(result, b);
  }

  return result;
}

