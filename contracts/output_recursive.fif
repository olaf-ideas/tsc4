"Asm.fif" include
// automatically generated from `contracts/4.fc` 
PROGRAM{
  DECLPROC recv_internal
  DECLPROC solve
  76319 DECLMETHOD caesar_cipher_encrypt
  86492 DECLMETHOD caesar_cipher_decrypt
  recv_internal PROC:<{
    // 
  }>
  solve PROCINLINE:<{
    //  shift text
    CTOS	//  shift ds
    NEWC	//  shift ds result
    OVER	//  shift ds result ds
    SBITS	//  shift ds result _7
    3 RSHIFT#	//  shift ds result len
    REPEAT:<{	//  shift ds result
      SWAP	//  shift result ds
      8 LDU	//  shift result x ds
      OVER	//  shift result x ds x
      96 GTINT	//  shift result x ds _15
      IF:<{	//  shift result x ds
        OVER	//  shift result x ds x
        123 LESSINT	//  shift result x ds _17
        IF:<{	//  shift result x ds
          s1 s3 XCPU	//  shift result ds x shift
          ADD	//  shift result ds x
          DUP	//  shift result ds x x
          122 GTINT	//  shift result ds x _20
          IF:<{	//  shift result ds x
            -26 ADDCONST	//  shift result ds x
          }>	//  shift result ds x
          SWAP	//  shift result x ds
        }>	//  shift result x ds
      }>ELSE<{	//  shift result x ds
        OVER	//  shift result x ds x
        64 GTINT	//  shift result x ds _24
        IF:<{	//  shift result x ds
          OVER	//  shift result x ds x
          91 LESSINT	//  shift result x ds _26
          IF:<{	//  shift result x ds
            s1 s3 XCPU	//  shift result ds x shift
            ADD	//  shift result ds x
            DUP	//  shift result ds x x
            90 GTINT	//  shift result ds x _29
            IF:<{	//  shift result ds x
              -26 ADDCONST	//  shift result ds x
            }>	//  shift result ds x
            SWAP	//  shift result x ds
          }>	//  shift result x ds
        }>	//  shift result x ds
      }>
      s0 s2 XCHG	//  shift ds x result
      8 STU	//  shift ds result
    }>
    OVER	//  shift ds result ds
    SREMPTY	//  shift ds result _34
    0 EQINT	//  shift ds result _36
    IF:<{	//  shift ds result
      SWAP	//  shift result ds
      PLDREF	//  shift result next
      s1 s2 XCHG	//  result shift next
      solve INLINECALLDICT	//  result rest
      SWAP	//  rest result
      STREF	//  result
    }>ELSE<{
      2 1 BLKDROP2	//  result
    }>
    ENDC	//  _42
  }>
  caesar_cipher_encrypt PROCINLINE:<{
    //  shift text
    SWAP
    26 PUSHINT	//  text shift _2=26
    MOD	//  text shift
    SWAP	//  shift text
    CTOS	//  shift ds
    DUP	//  shift ds ds
    SBITS	//  shift ds _11
    -32 ADDCONST	//  shift ds _13
    3 RSHIFT#	//  shift ds len
    SWAP
    32 PUSHINT	//  shift len ds _16=32
    SDSKIPFIRST	//  shift len ds
    0 PUSHINT	//  shift len ds _19=0
    NEWC	//  shift len ds _19=0 _20
    32 STU	//  shift len ds result
    s0 s2 XCHG	//  shift result ds len
    REPEAT:<{	//  shift result ds
      8 LDU	//  shift result x ds
      OVER	//  shift result x ds x
      96 GTINT	//  shift result x ds _28
      IF:<{	//  shift result x ds
        OVER	//  shift result x ds x
        123 LESSINT	//  shift result x ds _30
        IF:<{	//  shift result x ds
          s1 s3 XCPU	//  shift result ds x shift
          ADD	//  shift result ds x
          DUP	//  shift result ds x x
          122 GTINT	//  shift result ds x _33
          IF:<{	//  shift result ds x
            -26 ADDCONST	//  shift result ds x
          }>	//  shift result ds x
          SWAP	//  shift result x ds
        }>	//  shift result x ds
      }>ELSE<{	//  shift result x ds
        OVER	//  shift result x ds x
        64 GTINT	//  shift result x ds _37
        IF:<{	//  shift result x ds
          OVER	//  shift result x ds x
          91 LESSINT	//  shift result x ds _39
          IF:<{	//  shift result x ds
            s1 s3 XCPU	//  shift result ds x shift
            ADD	//  shift result ds x
            DUP	//  shift result ds x x
            90 GTINT	//  shift result ds x _42
            IF:<{	//  shift result ds x
              -26 ADDCONST	//  shift result ds x
            }>	//  shift result ds x
            SWAP	//  shift result x ds
          }>	//  shift result x ds
        }>	//  shift result x ds
      }>
      s0 s2 XCHG	//  shift ds x result
      8 STU	//  shift ds result
      SWAP	//  shift result ds
    }>
    DUP	//  shift result ds ds
    SREMPTY	//  shift result ds _47
    0 EQINT	//  shift result ds _49
    IF:<{	//  shift result ds
      PLDREF	//  shift result next
      s1 s2 XCHG	//  result shift next
      solve INLINECALLDICT	//  result rest
      SWAP	//  rest result
      STREF	//  result
    }>ELSE<{
      DROP
      NIP	//  result
    }>
    ENDC	//  _55
  }>
  caesar_cipher_decrypt PROCINLINE:<{
    //  shift text
    SWAP	//  text shift
    NEGATE	//  text _2
    SWAP	//  _2 text
    caesar_cipher_encrypt INLINECALLDICT	//  _3
  }>
}END>c
