{-
  TASK 2 - Matrix multiplier
  Write the method that multiplies one matrix by another.
  The 1st and 2nd parameter of the function will contain
  a matrix implemented using tuples (eg: [[1,2], [3,4]]).
  Matrices can be of different sizes, ranging from 4x4
  up to 32x32.
  Matrix can be rectangular where matrixA must to be of size n*m & matrixB of size m*p.
  After calculating the result matrix, the function should return final result (as tuple).
-}

() recv_internal() {
}

forall X -> (tuple, X) tpop(tuple t) asm "TPOP";
forall X -> X first(tuple t) asm "FIRST";
int tlen(tuple t) asm "TLEN";

;; testable
(tuple) matrix_multiplier(tuple matrixA, tuple matrixB) inline method_id {

  int n = tlen(matrixA);
  int m = tlen(matrixB);
  int p = tlen(first(matrixB));

  tuple matrixBT = empty_tuple();

  int x = 0;
  while (x < p) {
    tuple row = empty_tuple();

    int y = 0;
    while (y < m) {
      row~tpush(matrixB.at(y).at(x));

      y += 1;
    }

    matrixBT~tpush(row);

    x += 1;
  }

  tuple result = empty_tuple();

  int i = 0;
  while (i < n) {
    tuple row = empty_tuple();

    int j = 0;
    while (j < p) {
      tuple row_B = matrixBT.at(j);
      tuple row_A = matrixA.at(i);

      int value = 0;
    
      repeat(m) {
        (row_A, int a) = tpop(row_A);
        (row_B, int b) = tpop(row_B);

        value += a * b;
      }

      row~tpush(value);
      j += 1;
    }

    result~tpush(row);
    i += 1;
  }

  return result;
}