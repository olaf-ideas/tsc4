{-
  TASK 2 - Matrix multiplier
  Write the method that multiplies one matrix by another.
  The 1st and 2nd parameter of the function will contain
  a matrix implemented using tuples (eg: [[1,2], [3,4]]).
  Matrices can be of different sizes, ranging from 4x4
  up to 32x32.
  Matrix can be rectangular where matrixA must to be of size n*m & matrixB of size m*p.
  After calculating the result matrix, the function should return final result (as tuple).
-}

() recv_internal() {
}

forall X -> (tuple, X) tpop(tuple t) asm "TPOP";
forall X -> X first(tuple t) asm "FIRST";
int tlen(tuple t) asm "TLEN";
forall X -> (tuple, ()) ~tpush(tuple t, X value) asm "TPUSH";
tuple empty_tuple() asm "NIL";
forall X -> tuple cons(X head, tuple tail) asm "CONS";
forall X -> (tuple, X) list_next(tuple list) asm( -> 1 0) "UNCONS";
;; forall X -> (tuple, X) xdd(tuple list) asm "UNCONS";
;; forall X -> tuple dxx(tuple tail, X head) asm "CONS";

forall X -> X car(tuple list) asm "CAR";
tuple cdr(tuple list) asm "CDR";

;; testable
(tuple) matrix_multiplier(tuple matrixA, tuple matrixB) method_id {

  int n = tlen(matrixA);
  int m = tlen(matrixB);

  tuple A = empty_tuple();

  {
    int i = n - 1;
    repeat (n) {
      tuple row = empty_tuple();

      int j = 0;

      repeat (m) {
        row = cons(matrixA.at(i).at(j), row);
        j += 1;
      }

      A = cons(row, A);

      i -= 1;
    }
  }

  int p = tlen(first(matrixB));

  tuple B = empty_tuple();

  {
    int i = p - 1;
    repeat (p) {
      tuple row = empty_tuple();

      int j = 0;

      repeat (m) {
        row = cons(matrixB.at(j).at(i), row);
        j += 1;
      }

      B = cons(row, B);

      i -= 1;
    }
  }

  tuple C = empty_tuple();

  repeat (n) {
    tuple C_row = empty_tuple();
    tuple B_copy = B;
    repeat (p) {
      tuple B_row = B_copy~list_next();
      tuple A_row = car(A);

      int value = 0;
      repeat (m) {
        value += B_row~list_next() * A_row~list_next();
      }

      C_row~tpush(value);
    }

    A = cdr(A);

    C~tpush(C_row);
  }

  return C;
}