{-
  TASK 2 - Matrix multiplier
  Write the method that multiplies one matrix by another.
  The 1st and 2nd parameter of the function will contain
  a matrix implemented using tuples (eg: [[1,2], [3,4]]).
  Matrices can be of different sizes, ranging from 4x4
  up to 32x32.
  Matrix can be rectangular where matrixA must to be of size n*m & matrixB of size m*p.
  After calculating the result matrix, the function should return final result (as tuple).
-}

() recv_internal() {
}

forall X -> (tuple, X) tpop(tuple t) asm "TPOP";
forall X -> X first(tuple t) asm "FIRST";
int tlen(tuple t) asm "TLEN";
forall X -> (tuple, ()) ~tpush(tuple t, X value) asm "TPUSH";
tuple empty_tuple() asm "NIL";

;; testable
(tuple) _matrix_multiplier(tuple matrixA, tuple matrixB) asm """
OVER
TLEN
OVER
TLEN
s2 PUSH
FIRST
TLEN
NIL
0 PUSHINT
WHILE:<{
  s0 s2 PUSH2
  LESS
}>DO<{
  NIL
  0 PUSHINT
  WHILE:<{
    s0 s5 PUSH2
    LESS
  }>DO<{
    s7 s0 PUSH2
    INDEXVAR
    s3 PUSH
    INDEXVAR
    s1 s2 XCHG
    TPUSH
    SWAP
    INC
  }>
  DROP
  s1 s2 XCHG
  TPUSH
  SWAP
  INC
}>
DROP
s4 POP
NIL
0 PUSHINT
WHILE:<{
  s0 s4 PUSH2
  LESS
}>DO<{
  NIL
  0 PUSHINT
  WHILE:<{
    s0 s4 PUSH2
    LESS
  }>DO<{
    s8 s2 PUSH2
    INDEXVAR
    s8 s1 PUSH2
    INDEXVAR
    0 PUSHINT
    s8 PUSH
    REPEAT:<{
      s0 s2 XCHG
      TPOP
      s0 s2 XCHG
      TPOP
      s1 s3 XCHG
      MUL
      s1 s3 XCHG
      ADD
    }>
    2 1 BLKDROP2
    s1 s2 XCHG
    TPUSH
    SWAP
    INC
  }>
  DROP
  s1 s2 XCHG
  TPUSH
  SWAP
  INC
}>
s1 s6 XCHG
6 BLKDROP
""";

(tuple) matrix_multiplier(tuple matrixA, tuple matrixB) method_id {
  return _matrix_multiplier(matrixA, matrixB);
}

;; testable
;; (tuple) matrix_multiplier(tuple matrixA, tuple matrixB) method_id {

;;   int n = tlen(matrixA);
;;   int m = tlen(matrixB);
;;   int p = tlen(first(matrixB));

;;   tuple matrixBT = empty_tuple();

;;   int x = 0;
;;   while (x < p) {
;;     tuple row = empty_tuple();

;;     int y = 0;
;;     while (y < m) {
;;       row~tpush(matrixB.at(y).at(x));

;;       y += 1;
;;     }

;;     matrixBT~tpush(row);

;;     x += 1;
;;   }

;;   tuple result = empty_tuple();

;;   int i = 0;
;;   while (i < n) {
;;     tuple row = empty_tuple();

;;     int j = 0;
;;     while (j < p) {
;;       tuple row_A = matrixA.at(i);
;;       tuple row_B = matrixBT.at(j);

;;       int value = 0;
    
;;       repeat(m) {
;;         (row_A, int a) = tpop(row_A);
;;         (row_B, int b) = tpop(row_B);

;;         value += a * b;
;;       }

;;       row~tpush(value);
;;       j += 1;
;;     }

;;     result~tpush(row);
;;     i += 1;
;;   }

;;   return result;
;; }