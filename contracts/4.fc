{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

int is_null(tuple t) asm "ISNULL";
int ilen(int x) asm "UBITSIZE";
int is_prefix(slice pattern, slice text) asm "SDPFX";

(tuple, ()) push_back(tuple tail, builder head) asm "CONS";
(tuple, builder) pop_back(tuple list) asm "UNCONS";

(int, slice) load_zeros(slice s) asm "LDZEROES";
builder store_one(builder b) asm "STONE";
builder store_zeros(builder b, int cnt) asm "STZEROES";

builder store_ref(builder b, cell c) asm(c b) "STREF";
(slice, cell) load_ref(slice s) asm( -> 1 0) "LDREF";
int slice_refs(slice s) asm "SREFS";
int min(int x, int y) asm "MIN";
builder store_slice(builder b, slice s) asm "STSLICER";
(slice, ()) ~skip_bits(slice s, int len) asm "SDSKIPFIRST";
forall X -> X null() asm "PUSHNULL";
int slice_bits(slice s) asm "SBITS";
builder begin_cell() asm "NEWC";
slice begin_parse(cell c) asm "CTOS";
cell end_cell(builder b) asm "ENDC";
int builder_bits(builder b) asm "BBITS";
int slice_empty?(slice s) asm "SEMPTY";
int slice_refs_empty?(slice s) asm "SREMPTY";
slice skip_bits(slice s, int len) asm "SDSKIPFIRST";
int cell_depth(cell c) asm "CDEPTH";
int slice_depth(slice s) asm "SDEPTH";

int encode_char(int shift, int x) inline {
  if (x <= 90) {
    if (x >= 65) {
      x += shift;

      if (x > 90) {
        x -= 26;
      }
    }
  }
  else {
    if (x <= 122) {
      if (x >= 97) {
        x += shift;

        if (x > 122) {
          x -= 26;
        }
      }
    }
  }

  return x;
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) inline method_id {
  shift %= 26;

  tuple l = null();
  builder b = begin_cell().store_uint(0, 32);

  slice ds = text.begin_parse().skip_bits(32);

  repeat (ds.slice_bits() >> 3) {
    b = store_uint(b, encode_char(shift, ds~load_uint(8)), 8);
  }

  ifnot (ds.slice_refs_empty?()) {
    ds = ds~load_ref().begin_parse();
    l~push_back(b);
    b = begin_cell();

    repeat (slice_depth(ds)) {
      repeat (127) {
        b = store_uint(b, encode_char(shift, ds~load_uint(8)), 8);
      }

      ds = ds~load_ref().begin_parse();
      l~push_back(b);
      b = begin_cell();
    }

    repeat (ds.slice_bits() >> 3) {
      b = store_uint(b, encode_char(shift, ds~load_uint(8)), 8);
    }
  }

  cell result = b.end_cell();

  ifnot (is_null(l)) {
    do {
      result = (l~pop_back()).store_ref(result).end_cell();
    } until (is_null(l));
  }

  return result;
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) inline method_id {
  shift %= 26;

  return caesar_cipher_encrypt(26 - shift, text);
}