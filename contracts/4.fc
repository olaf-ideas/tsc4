{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

int is_null(tuple t) asm "ISNULL";
int ilen(int x) asm "UBITSIZE";
int is_prefix(slice pattern, slice text) asm "SDPFX";

(tuple, ()) push_back(tuple tail, builder head) asm "CONS";
(tuple, builder) pop_back(tuple list) asm "UNCONS";

(int, slice) load_zeros(slice s) asm "LDZEROES";
builder store_one(builder b) asm "STONE";
builder store_zeros(builder b, int cnt) asm "STZEROES";

builder store_ref(builder b, cell c) asm(c b) "STREF";
(slice, cell) load_ref(slice s) asm( -> 1 0) "LDREF";
int slice_refs(slice s) asm "SREFS";
int min(int x, int y) asm "MIN";
builder store_slice(builder b, slice s) asm "STSLICER";
(slice, ()) ~skip_bits(slice s, int len) asm "SDSKIPFIRST";
forall X -> X null() asm "PUSHNULL";
int slice_bits(slice s) asm "SBITS";
builder begin_cell() asm "NEWC";
slice begin_parse(cell c) asm "CTOS";
cell end_cell(builder b) asm "ENDC";
int builder_bits(builder b) asm "BBITS";
int slice_empty?(slice s) asm "SEMPTY";
int slice_refs_empty?(slice s) asm "SREMPTY";
slice skip_bits(slice s, int len) asm "SDSKIPFIRST";
int cell_depth(cell c) asm "CDEPTH";
int slice_depth(slice s) asm "SDEPTH";

int sgn(int x) asm "SGN";
builder store_one(builder b) asm "STONE";

;; (x-97)/ (122 - 97)

(cell) rec(int shift, cell text) inline {
  builder result = begin_cell();
  
  slice ds = text.begin_parse();

  repeat (ds.slice_bits() >> 3) {
    int x = ds~load_uint(3);
    result = store_uint(result, x, 3);

    int y = ds~load_uint(5);

    ifnot ((y - 1) / 26) {
      y += shift;
      if (y > 26) {
        y -= 26;
      }
    }
    
    result = store_uint(result, y, 5);
  }

  ifnot (ds.slice_refs_empty?()) {
    result = result.store_ref(rec(shift, ds~load_ref())); 
  }

  return result.end_cell();
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) inline method_id {
  shift %= 26;

  builder result = begin_cell().store_zeros(32);

  slice ds = text.begin_parse().skip_bits(32);
  
  repeat (ds.slice_bits() >> 3) {
    int x = ds~load_uint(3);
    result = store_uint(result, x, 3);

    int y = ds~load_uint(5);

    ifnot ((y - 1) / 26) {
      y += shift;
      if (y > 26) {
        y -= 26;
      }
    }
    
    result = store_uint(result, y, 5);
  }

  ifnot (ds.slice_refs_empty?()) {
    result = result.store_ref(rec(shift, ds~load_ref())); 
  }

  return result.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) inline method_id {
  shift %= 26;

  return caesar_cipher_encrypt(26 - shift, text);
}