{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

int is_null(cell c) asm "ISNULL";

() recv_internal() {
}

cell solve(int shift, cell text) {
  slice ds = text.begin_parse();

  builder result = begin_cell();

  int len = ds.slice_bits() >> 3;
  repeat(len) {
    int x = ds~load_uint(8);

    if (97 <= x) {
      if (x <= 122) {
        x += shift;

        if (x > 122) {
          x -= 26;
        }
      }
    }
    else {
      if (65 <= x) { 
        if (x <= 90) {
          x += shift;
          
          if (x > 90) {
            x -= 26;
          }
        }
      }
    }

    result = store_uint(result, x, 8);
  }

  if (ds.slice_refs_empty?() == false) {
    cell next = preload_ref(ds);
    cell rest = solve(shift, next);
    result = store_ref(result, rest);
  }

  return result.end_cell();
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) inline method_id {
  if (shift < 0) {
    shift += 26;
  }

  slice ds = text.begin_parse();

  int len = (ds.slice_bits() - 32) >> 3;

  ds = skip_bits(ds, 32);

  builder result = begin_cell().store_uint(0, 32);
  
  repeat(len) {
    int x = ds~load_uint(8);

    if (97 <= x) {
      if (x <= 122) {
        x += shift;

        if (x > 122) {
          x -= 26;
        }    
      }
    }
    else {
      if (65 <= x) { 
        if (x <= 90) {
          x += shift;

          if (x > 90) {
            x -= 26;
          }
        }
      }
    }

    result = store_uint(result, x, 8);
  }

  if (ds.slice_refs_empty?() == false) {
    cell next = preload_ref(ds);
    cell rest = solve(shift, next);
    result = store_ref(result, rest);
  }

  return result.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) inline method_id {
  return caesar_cipher_encrypt(shift, text);
}