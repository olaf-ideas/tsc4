{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

global int _shift, slice ds, int len, int x;

cell solve() inline {
  builder result = begin_cell();

  len = ds.slice_bits() >> 3;

  repeat (len) {
    x = ds~load_uint(8);

    if (97 <= x) {
      if (x <= 122) {
        x = x + _shift;

        if (x > 122) {
          x -= 26;
        }
      }
    }
    else {
      if (65 <= x) { 
        if (x <= 90) {
          x = x + _shift;

          if (x > 90) {
            x -= 26;
          }
        }
      }
    }

    result = store_uint(result, x, 8);
  }

  if (ds.slice_refs_empty?() == false) {
    ds = ds.preload_ref().begin_parse();

    result = store_ref(result, solve());
  }

  return result.end_cell();
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) inline method_id {
  shift %= 26;

  if (shift < 0) {
    shift += 26;
  }

  _shift = shift;

  ds = text.begin_parse();

  int len1 = (ds.slice_bits() - 32) >> 3;

  ds = skip_bits(ds, 32);

  builder result = begin_cell().store_uint(0, 32);
  
  repeat (len1) {
    x = ds~load_uint(8);

    if (97 <= x) {
      if (x <= 122) {
        x = x + shift;

        if (x > 122) {
          x -= 26;
        }
      }
    }
    else {
      if (65 <= x) { 
        if (x <= 90) {
          x += shift;

          if (x > 90) {
            x -= 26;
          }
        }
      }
    }

    result = store_uint(result, x, 8);
  }

  if (ds.slice_refs_empty?() == false) {
    ds = ds.preload_ref().begin_parse();

    result = store_ref(result, solve());
  }

  return result.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) inline method_id {
  return caesar_cipher_encrypt(- shift, text);
}