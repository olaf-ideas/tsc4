{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

forall X -> (tuple, X) tpop(tuple t) asm "TPOP";

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) inline method_id {
  shift %= 26;

  if (shift < 0) {
    shift += 26;
  }

  slice ds = text.begin_parse().skip_bits(32);

  builder block = begin_cell().store_uint(0, 32);

  tuple list = empty_tuple();
  int ok = true;

  int len = 0;

  while (ok) {
    int rep = ds.slice_bits() >> 3;

    repeat (rep) {
      int x = ds~load_uint(8);

      if (97 <= x) {
        if (x <= 122) {
          x += shift;

          if (x > 122) {
            x -= 26;
          }
        }
      }
      else {
        if (65 <= x) {
          if (x <= 90) {
            x += shift;

            if (x > 90) {
              x -= 26;
            }
          }
        }
      }

      block = store_uint(block, x, 8);
    }

    if (ds.slice_refs_empty?()) {
      ok = false;
    }
    else {
      ds = ds.preload_ref().begin_parse();

      list~tpush(block);
      len += 1;

      block = begin_cell();
    }
  }

  cell result = block.end_cell();

  repeat (len) {
    (list, builder top) = tpop(list);

    result = top.store_ref(result).end_cell();
  }

  return result;
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) inline method_id {
  return caesar_cipher_encrypt(- shift, text);
}