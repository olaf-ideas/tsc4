{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) inline method_id {
  slice ds = text.begin_parse();
  ds~skip_bits(32);

  int len = ds.slice_bits() >> 3;

  builder result = begin_cell();

  repeat(len) {
    int x = ds~load_uint(8);

    x -= shift;

    if (x < 0) {
      x += 256;
    }

    result~store_uint(x, 8);
  }

  return result.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) inline method_id {
  slice ds = text.begin_parse();
  ds~skip_bits(32);

  int len = ds.slice_bits();

  builder result = begin_cell();

  while (len > 0) {
    int x = ds~load_uint(8);

    x += shift;

    if (x >= 256) {
      x -= 256;
    }

    result~store_uint(x, 8);

    len -= 8;
  }

  return result.end_cell();
}