{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

cell preload_ref(slice s) asm "PLDREF";

() recv_internal() {
}

(cell) _caesar_cipher_encrypt(int shift, slice ds) inline {
  builder result = begin_cell();
  
  int len = ds.slice_bits();

  while (len > 0) {
    int x = ds~load_uint(8);

    x -= shift;

    result~store_uint(x, 8);

    len -= 8;
  }

  if (ds.slice_refs_empty?()) {
    cell next_block = preload_ref(ds);
    slice next_ds = next_block.begin_parse();
    
    cell solved = _caesar_cipher_encrypt(shift, next_ds);

    result.store_ref(solved);
  }

  return result.end_cell();
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) inline method_id {
  slice ds = text.begin_parse();
  ds~skip_bits(32);

  return _caesar_cipher_encrypt(shift, ds);
}

(cell) _caesar_cipher_decrypt(int shift, slice ds) inline {
  builder result = begin_cell();
  
  int len = ds.slice_bits();

  while (len > 0) {
    int x = ds~load_uint(8);

    x += shift;

    result~store_uint(x, 8);

    len -= 8;
  }

  if (ds.slice_refs_empty?()) {
    cell next_block = preload_ref(ds);
    slice next_ds = next_block.begin_parse();
    
    cell solved = _caesar_cipher_encrypt(shift, next_ds);

    result.store_ref(solved);
  }

  return result.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) inline method_id {
  slice ds = text.begin_parse();
  ds~skip_bits(32);

  return _caesar_cipher_decrypt(shift, ds);
}