{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) inline method_id {
  slice ds = text.begin_parse();
  ds~skip_bits(32);

  builder result = begin_cell();

  int flag = true;

  while(flag) {

    int len = ds.slice_bits() >> 3;

    repeat(len) {
      int x = ds~load_uint(8);

      if (97 <= x) {
        if (x <= 122) {
          x = (x - 97 + shift) % 26 + 97;
        }
      }
      else {
        if (65 <= x) { 
          if (x <= 90) {
            x = (x - 65 + shift) % 26 + 65;
          }
        }
      }

      result~store_uint(x, 8);
    }

    if (ds.slice_refs_empty?()) {
      flag = false;
    }
    else {
      cell nx = ds.preload_ref();
      ds = nx.begin_parse();
    }
  }

  return result.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) inline method_id {
  return caesar_cipher_encrypt(- shift, text);
}