{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

builder store_ref(builder b, cell c) asm(c b) "STREF";
forall X -> (tuple, X) list_next(tuple list) asm( -> 1 0) "UNCONS";
cell end_cell(builder b) asm "ENDC";
forall X -> tuple cons(X head, tuple tail) asm "CONS";
cell preload_ref(slice s) asm "PLDREF";
int slice_data_empty?(slice s) asm "SDEMPTY";
int slice_empty?(slice s) asm "SEMPTY";
tuple empty_tuple() asm "NIL";
builder begin_cell() asm "NEWC";
slice skip_bits(slice s, int len) asm "SDSKIPFIRST";
slice begin_parse(cell c) asm "CTOS";

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) inline method_id {
  shift %= 26;

  if (shift < 0) {
    shift += 26;
  }

  slice ds = text.begin_parse().skip_bits(32);

  builder block = begin_cell().store_uint(0, 32);

  tuple list = empty_tuple();
  int len = 0;

  while (~ ds.slice_empty?()) {
    if (ds.slice_data_empty?()) {
      ds = ds.preload_ref().begin_parse();

      list = cons(block, list);
      block = begin_cell();
      len += 1;
    }

    int x = ds~load_uint(8);

    if (97 <= x) {
      if (x <= 122) {
        x += shift;

        if (x > 122) {
          x -= 26;
        }
      }
    }
    else {
      if (65 <= x) {
        if (x <= 90) {
          x += shift;

          if (x > 90) {
            x -= 26;
          }
        }
      }
    }

    block = store_uint(block, x, 8);
  }

  cell result = block.end_cell();

  repeat (len) {
    builder top = list~list_next();

    result = top.store_ref(result).end_cell();
  }

  return result;
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) inline method_id {
  return caesar_cipher_encrypt(- shift, text);
}