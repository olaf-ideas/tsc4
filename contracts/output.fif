"Asm.fif" include
// automatically generated from `contracts/5.fc` 
PROGRAM{
  DECLPROC recv_internal
  100995 DECLMETHOD fibonacci_sequence
  recv_internal PROC:<{
    // 
  }>
  fibonacci_sequence PROCINLINE:<{
    //  n k
    DUP
    8 PUSHPOW2DEC	//  n k k _2=255
    EQUAL	//  n k _3
    IF:<{	//  n k
      DEC	//  n _6
      // n, k
      s0 PUSH
      // n, k, k
      0 EQINT
      // n, k, k=0
      IF:<{
        // n, k
        DROP2
        //
        NIL
      }>ELSE<{
        // n, k
        s0 PUSH
        // n, k, k
        1 EQINT
        // n, k, k=1
        IF:<{
          DROP
          s0 PUSH
          100 GEQINT
          IF:<{
            100 SUBCONST
            354224848179261915075 PUSHINT
            573147844013817084101 PUSHINT
          }>ELSE<{
            1 PUSHINT
            0 PUSHINT
          }>
          s0 DUMP
          s1 DUMP
          s2 DUMP
          
          // n, f_-1, f_0
          ROT
          // f_-1, f_0, n
          REPEAT:<{
            // f_i-1, f_i
            TUCK 
            // f_i, f_i-1, f_i
            ADD
            // f_i, f_i+1
          }>
          SWAP
          // f_n, f_n-1
          DROP
          // f_n
          SINGLE
          // (f_n)
        }>ELSE<{
          SWAP // k, n
          ROT // k, a, b, n
          REPEAT:<{ // k, a, b
            TUCK // k, b, a, b
            ADD // k, b, a + b
          }>
          // k, f_n, f_n + 1
          s2 PUSH
          // k, f_n, f_n + 1, k
          2 SUBCONST
          // k, f_n, f_n + 1, k - 2 remember to if 1
          REPEAT:<{
            // k, f_n, f_n + 1
            DUP2
            ADD
            s3 s2 XCHG
          }>
          // f_n, f_n + 1, ... f_n + k - 3, k, f_n + k - 2, f_n + k - 1
          ROT
          // f_n, f_n + 1, ... f_n + k - 3, f_n + k - 2, f_n + k - 1, k
          TUPLEVAR
          // (f_n, f_n + 1, ..., f_n + k - 1)
        }>
      }>	//  t
      DUP
      252 PUSHINT	//  t t _9=252
      INDEXVAR	//  t a
      OVER	//  t a t
      LAST	//  t a b
      ADD	//  t _14
      TPUSH	//  t
    }>ELSE<{	//  n k
      // n, k
      s0 PUSH
      // n, k, k
      0 EQINT
      // n, k, k=0
      IF:<{
        // n, k
        DROP2
        //
        NIL
      }>ELSE<{
        // n, k
        s0 PUSH
        // n, k, k
        1 EQINT
        // n, k, k=1
        IF:<{
          DROP
          s0 PUSH
          100 GEQINT
          IF:<{
            100 SUBCONST
            354224848179261915075 PUSHINT
            573147844013817084101 PUSHINT
          }>ELSE<{
            1 PUSHINT
            0 PUSHINT
          }>
          s0 DUMP
          s1 DUMP
          s2 DUMP
          
          // n, f_-1, f_0
          ROT
          // f_-1, f_0, n
          REPEAT:<{
            // f_i-1, f_i
            TUCK 
            // f_i, f_i-1, f_i
            ADD
            // f_i, f_i+1
          }>
          SWAP
          // f_n, f_n-1
          DROP
          // f_n
          SINGLE
          // (f_n)
        }>ELSE<{
          SWAP // k, n
          ROT // k, a, b, n
          REPEAT:<{ // k, a, b
            TUCK // k, b, a, b
            ADD // k, b, a + b
          }>
          // k, f_n, f_n + 1
          s2 PUSH
          // k, f_n, f_n + 1, k
          2 SUBCONST
          // k, f_n, f_n + 1, k - 2 remember to if 1
          REPEAT:<{
            // k, f_n, f_n + 1
            DUP2
            ADD
            s3 s2 XCHG
          }>
          // f_n, f_n + 1, ... f_n + k - 3, k, f_n + k - 2, f_n + k - 1
          ROT
          // f_n, f_n + 1, ... f_n + k - 3, f_n + k - 2, f_n + k - 1, k
          TUPLEVAR
          // (f_n, f_n + 1, ..., f_n + k - 1)
        }>
      }>	//  _16
    }>
  }>
}END>c
