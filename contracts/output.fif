"Asm.fif" include
// automatically generated from `contracts/5.fc` 
PROGRAM{
  DECLPROC recv_internal
  100995 DECLMETHOD fibonacci_sequence
  recv_internal PROC:<{
    // 
  }>
  fibonacci_sequence PROC:<{
    //  n k
    DUP
    8 PUSHPOW2DEC	//  n k k _2=255
    EQUAL	//  n k _3
    IFJMP:<{	//  n k
      DEC	//  n _6
      // n, k
      s0 PUSH
      // n, k, k
      0 EQINT
      // n, k, k=0
      IF:<{
        // n, k
        DROP2
        //
        NIL
      }>ELSE<{
        // n, k
        s0 PUSH
        // n, k, k
        1 EQINT
        // n, k, k=1
        IF:<{
          // n, k
          DROP
          // n
          1 PUSHINT
          0 PUSHINT
          // n, f_-1, f_0
          ROT
          // f_-1, f_0, n
          REPEAT:<{
            // f_i-1, f_i
            TUCK 
            // f_i, f_i-1, f_i
            ADD
            // f_i, f_i+1
          }>
          SWAP
          // f_n, f_n-1
          DROP
          // f_n
          SINGLE
          // (f_n)
        }>ELSE<{
          s0 PUSH
          255 EQINT
          IF:<{
            // n, k
            1 SUBINT
            // n, k - 1
            SWAP // k, n
            0 PUSHINT // k, n, a
            1 PUSHINT // k, n, a, b
            ROT // k, a, b, n
            REPEAT:<{ // k, a, b
              TUCK // k, b, a, b
              ADD // k, b, a + b
            }>
            // k, f_n, f_n + 1
            s2 PUSH
            // k, f_n, f_n + 1, k
            2 SUBCONST
            // k, f_n, f_n + 1, k - 2 remember to if 1
            REPEAT:<{
              // k, f_n, f_n + 1
              DUP2
              ADD
              s3 s2 XCHG
            }>
            // f_n, f_n + 1, ... f_n + k - 3, k, f_n + k - 2, f_n + k - 1
            ROT
            // f_n, f_n + 1, ... f_n + k - 3, f_n + k - 2, f_n + k - 1, k
            TUPLEVAR
            // (f_n, f_n + 1, ..., f_n + k - 1)
            s0 PUSH
            // t t
            253 PUSHINT
            // t t 253
            INDEXVAR
            // t t(253)
            s1 PUSH
            // t t(253) t
            LAST
            // t t(253) t(254)
            ADD
            // t f_n+k-1
            TPUSH
            // t
          }>ELSE<{
            SWAP // k, n
            0 PUSHINT // k, n, a
            1 PUSHINT // k, n, a, b
            ROT // k, a, b, n
            REPEAT:<{ // k, a, b
              TUCK // k, b, a, b
              ADD // k, b, a + b
            }>
            // k, f_n, f_n + 1
            s2 PUSH
            // k, f_n, f_n + 1, k
            2 SUBCONST
            // k, f_n, f_n + 1, k - 2 remember to if 1
            REPEAT:<{
              // k, f_n, f_n + 1
              DUP2
              ADD
              s3 s2 XCHG
            }>
            // f_n, f_n + 1, ... f_n + k - 3, k, f_n + k - 2, f_n + k - 1
            ROT
            // f_n, f_n + 1, ... f_n + k - 3, f_n + k - 2, f_n + k - 1, k
            TUPLEVAR
            // (f_n, f_n + 1, ..., f_n + k - 1)
          }>
        }>
      }>	//  t
      DUP
      253 PUSHINT	//  t t _9=253
      INDEXVAR	//  t a
      OVER	//  t a t
      LAST	//  t a b
      ADD	//  t _14
      TPUSH	//  t
    }>	//  n k
    // n, k
    s0 PUSH
    // n, k, k
    0 EQINT
    // n, k, k=0
    IF:<{
      // n, k
      DROP2
      //
      NIL
    }>ELSE<{
      // n, k
      s0 PUSH
      // n, k, k
      1 EQINT
      // n, k, k=1
      IF:<{
        // n, k
        DROP
        // n
        1 PUSHINT
        0 PUSHINT
        // n, f_-1, f_0
        ROT
        // f_-1, f_0, n
        REPEAT:<{
          // f_i-1, f_i
          TUCK 
          // f_i, f_i-1, f_i
          ADD
          // f_i, f_i+1
        }>
        SWAP
        // f_n, f_n-1
        DROP
        // f_n
        SINGLE
        // (f_n)
      }>ELSE<{
        s0 PUSH
        255 EQINT
        IF:<{
          // n, k
          1 SUBINT
          // n, k - 1
          SWAP // k, n
          0 PUSHINT // k, n, a
          1 PUSHINT // k, n, a, b
          ROT // k, a, b, n
          REPEAT:<{ // k, a, b
            TUCK // k, b, a, b
            ADD // k, b, a + b
          }>
          // k, f_n, f_n + 1
          s2 PUSH
          // k, f_n, f_n + 1, k
          2 SUBCONST
          // k, f_n, f_n + 1, k - 2 remember to if 1
          REPEAT:<{
            // k, f_n, f_n + 1
            DUP2
            ADD
            s3 s2 XCHG
          }>
          // f_n, f_n + 1, ... f_n + k - 3, k, f_n + k - 2, f_n + k - 1
          ROT
          // f_n, f_n + 1, ... f_n + k - 3, f_n + k - 2, f_n + k - 1, k
          TUPLEVAR
          // (f_n, f_n + 1, ..., f_n + k - 1)
          s0 PUSH
          // t t
          253 PUSHINT
          // t t 253
          INDEXVAR
          // t t(253)
          s1 PUSH
          // t t(253) t
          LAST
          // t t(253) t(254)
          ADD
          // t f_n+k-1
          TPUSH
          // t
        }>ELSE<{
          SWAP // k, n
          0 PUSHINT // k, n, a
          1 PUSHINT // k, n, a, b
          ROT // k, a, b, n
          REPEAT:<{ // k, a, b
            TUCK // k, b, a, b
            ADD // k, b, a + b
          }>
          // k, f_n, f_n + 1
          s2 PUSH
          // k, f_n, f_n + 1, k
          2 SUBCONST
          // k, f_n, f_n + 1, k - 2 remember to if 1
          REPEAT:<{
            // k, f_n, f_n + 1
            DUP2
            ADD
            s3 s2 XCHG
          }>
          // f_n, f_n + 1, ... f_n + k - 3, k, f_n + k - 2, f_n + k - 1
          ROT
          // f_n, f_n + 1, ... f_n + k - 3, f_n + k - 2, f_n + k - 1, k
          TUPLEVAR
          // (f_n, f_n + 1, ..., f_n + k - 1)
        }>
      }>
    }>	//  _16
  }>
}END>c
